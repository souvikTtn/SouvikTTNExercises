/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

apply plugin: 'java'

version = '1.0'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.maven.apache.org/maven2" }
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    compile('org.springframework:spring-webmvc:5.1.5.RELEASE') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    // compile group: 'org.springframework', name: 'spring-webmvc', version: '5.1.5.RELEASE'
}

// Find source files here
// Default: src/main/java

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/main/java2']
        }
        resources {
            srcDirs = ['src/main/resources']
            // include { 'file1.xml' }
            exclude 'file2.txt'
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

jar {
//    from sourceSets.main.resources {
//        include { 'file1.xml' }
//        exclude { 'file2.txt' }
//    }
    manifest {
        attributes 'Implementation-Title': 'Gradle Tutorial',
                'Implementation-Version': version,
                'Main-Class': 'Application'
    }
    from { (configurations.compile).collect { it.isDirectory() ? it : zipTree(it) } }
}

// gradle runJavaApplication
task runJavaApplication(type: JavaExec, dependsOn: 'classes') {
    main = "Application"
    classpath = sourceSets.main.runtimeClasspath
}

// OR
// java -cp build/classes/java/main Application

task hello {
    println "Hello hello!"
}

apply from: 'mytasks.gradle'

task goodbye(dependsOn: hello) << {
    println "Goodbye!"
}

hello << {
    println "You say goodbye when I say hello!"
}

task sing << {
    println "Hello goodbye hello goodbye!"
}

sing.dependsOn(hello, goodbye)

task taskOne << {
    println "This is task one which depends on library mytasks"
}

task libOne << {
    println "Library one"
}

task libTwo << {
    println "Library two"
}

task notLib << {
    println "Not a library task"
}

taskOne.dependsOn { tasks.findAll { task -> task.name.startsWith('lib') } }
